import{A as c}from"./apiResource-CLOj6waL.js";const t=c;async function l(o){const e=await fetch(`${t}cadenaCompleta/${o}`);if(!e.ok)throw new Error("Error al obtener la cadena completa");return await e.json()}async function f(o,e){try{let a;if(e?a=await fetch(`${t}cadenaCompleta/evento/${o}?matrizId=${e}`):a=await fetch(`${t}cadenaCompleta/evento/${o}`),!a.ok){const r=a.status,s=await a.json(),n=new Error(s.message||"Error al obtener el evento preparado");throw n.status=r,n}return await a.json()}catch(a){throw a.status||(console.error("fetchEventoPreparado: ",(a==null?void 0:a.message)||`Error desconocido 
`,a),a.status=0,a.message="Error de conexi√≥n: No se pudo acceder al Evento Preparado"),a}}async function p(o){try{const e=await fetch(`${t}matrizcadena?cadenaId=${o}`);if(!e.ok)throw new Error(`Error al obtener matriz de la cadena (${e.status})`);return await e.json()}catch(e){throw console.error("Error al obtener matriz de la cadena:",e),e}}async function w(o,e,a){a&&await i(o);const r=await fetch(`${t}cadenaCompleta/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({cadenaId:o,cadenaCompleta:e})});if(!r.ok)throw new Error("Error al guardar la cadena completa");return await r.json()}async function i(o){if(!(await fetch(`${t}cadenaCompleta/${o}`,{method:"DELETE"})).ok)throw new Error("Error al eliminar la cadenaCompleta")}async function h(){const o=await fetch(`${t}umConvert/`);if(!o.ok)throw new Error("Error al obtener los factores de conversion");return await o.json()}const m={noEncontrada:1,encontrada:2,nueva:3,calculada:4,metodoNoCoincide:5};export{p as a,f as b,h as c,i as d,m as e,l as f,w as s};
